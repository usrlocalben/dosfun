#include "vga_bios.hpp"

#include <array>
#include <cstdint>

#include <dpmi.h>

using std::uint8_t;

namespace rqdq {
namespace vga {


void BIOSUtil::Mode(uint8_t modeNum) {
	__dpmi_regs r;
	r.h.ah = 0;  // set video mode
	r.h.al = modeNum;
	__dpmi_int(0x10, &r); }


auto BIOSUtil::Mode() -> uint8_t {
	__dpmi_regs r;
	r.h.ah = 0x0f;  // get current video mode
	__dpmi_int(0x10, &r);
	return r.h.al; }


void BIOSUtil::Border(uint8_t idx) {
	__dpmi_regs r;
	r.x.ax = 0x1001;
	r.h.bh = idx;
	__dpmi_int(0x10, &r); }


const std::array<rgl::TrueColorPixel, 256> kBIOSPalette = { {
// original pc 16 colors
0x00000000,0x00a80000,0x0000a800,0x00a8a800,0x000000a8,0x00a800a8,0x000054a8,0x00a8a8a8,
0x00545454,0x00fc5454,0x0054fc54,0x00fcfc54,0x005454fc,0x00fc54fc,0x0054fcfc,0x00fcfcfc,

// 16 grey shades
0x00000000,0x00141414,0x00202020,0x002c2c2c,0x00383838,0x00444444,0x00505050,0x00606060,
0x00707070,0x00808080,0x00909090,0x00a0a0a0,0x00b4b4b4,0x00c8c8c8,0x00e0e0e0,0x00fcfcfc,

// rgb block 1, 24*3
0x00fc0000,0x00fc0040,0x00fc007c,0x00fc00bc,0x00fc00fc,0x00bc00fc,0x007c00fc,0x004000fc,0x000000fc,
0x000040fc,0x00007cfc,0x0000bcfc,0x0000fcfc,0x0000fcbc,0x0000fc7c,0x0000fc40,0x0000fc00,
0x0040fc00,0x007cfc00,0x00bcfc00,0x00fcfc00,0x00fcbc00,0x00fc7c00,0x00fc4000,

0x00fc7c7c,0x00fc7c9c,0x00fc7cbc,0x00fc7cdc,0x00fc7cfc,0x00dc7cfc,0x00bc7cfc,0x009c7cfc,0x007c7cfc,
0x007c9cfc,0x007cbcfc,0x007cdcfc,0x007cfcfc,0x007cfcdc,0x007cfcbc,0x007cfc9c,0x007cfc7c,
0x009cfc7c,0x00bcfc7c,0x00dcfc7c,0x00fcfc7c,0x00fcdc7c,0x00fcbc7c,0x00fc9c7c,

0x00fcb4b4,0x00fcb4c4,0x00fcb4d8,0x00fcb4e8,0x00fcb4fc,0x00e8b4fc,0x00d8b4fc,0x00c4b4fc,0x00b4b4fc,
0x00b4c4fc,0x00b4d8fc,0x00b4e8fc,0x00b4fcfc,0x00b4fce8,0x00b4fcd8,0x00b4fcc4,0x00b4fcb4,
0x00c4fcb4,0x00d8fcb4,0x00e8fcb4,0x00fcfcb4,0x00fce8b4,0x00fcd8b4,0x00fcc4b4,

// rgb block 2, 24*3
0x00700000,0x0070001c,0x00700038,0x00700054,0x00700070,0x00540070,0x00380070,0x001c0070,0x00000070,
0x00001c70,0x00003870,0x00005470,0x00007070,0x00007054,0x00007038,0x0000701c,0x00007000,
0x001c7000,0x00387000,0x00547000,0x00707000,0x00705400,0x00703800,0x00701c00,

0x00703838,0x00703844,0x00703854,0x00703860,0x00703870,0x00603870,0x00543870,0x00443870,0x00383870,
0x00384470,0x00385470,0x00386070,0x00387070,0x00387060,0x00387054,0x00387044,0x00387038,
0x00447038,0x00547038,0x00607038,0x00707038,0x00706038,0x00705438,0x00704438,

0x00705050,0x00705058,0x00705060,0x00705068,0x00705070,0x00685070,0x00605070,0x00585070,0x00505070,
0x00505870,0x00506070,0x00506870,0x00507070,0x00507068,0x00507060,0x00507058,0x00507050,
0x00587050,0x00607050,0x00687050,0x00707050,0x00706850,0x00706050,0x00705850,

// rgb block 3 24*3
0x00400000,0x00400010,0x00400020,0x00400030,0x00400040,0x00300040,0x00200040,0x00100040,0x00000040,
0x00001040,0x00002040,0x00003040,0x00004040,0x00004030,0x00004020,0x00004010,0x00004000,
0x00104000,0x00204000,0x00304000,0x00404000,0x00403000,0x00402000,0x00401000,

0x00402020,0x00402028,0x00402030,0x00402038,0x00402040,0x00382040,0x00302040,0x00282040,0x00202040,
0x00202840,0x00203040,0x00203840,0x00204040,0x00204038,0x00204030,0x00204028,0x00204020,
0x00284020,0x00304020,0x00384020,0x00404020,0x00403820,0x00403020,0x00402820,

0x00402c2c,0x00402c30,0x00402c34,0x00402c3c,0x00402c40,0x003c2c40,0x00342c40,0x00302c40,0x002c2c40,
0x002c3040,0x002c3440,0x002c3c40,0x002c4040,0x002c403c,0x002c4034,0x002c4030,0x002c402c,
0x0030402c,0x0034402c,0x003c402c,0x0040402c,0x00403c2c,0x0040342c,0x0040302c,

// black
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000
} };


}  // close package namespace
}  // close enterprise namespace
